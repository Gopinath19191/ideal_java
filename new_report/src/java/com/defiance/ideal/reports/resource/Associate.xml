<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="AssociateMap">
    <select id="getDetails" parameterClass="com.defiance.ideal.reports.dto.AssociateDataDTO" resultClass="com.defiance.ideal.reports.dto.AssociateFilterDTO">
        
<!--        SELECT emp.title as title, 
        emp.employee_number AS empNumber, 
        concat( emp.first_name," ", emp.last_name ) AS empName,
        emp.pan_number AS panNumber,
        CASE WHEN (idp.proof_number IS NULL || idp.proof_number ="") 
        THEN doe.adhar_number
        ELSE idp.proof_number
        END AS finalAdhar,   
        DATE_FORMAT(emp.birth_date, '%d-%m-%Y') as birthDate,DATE_FORMAT(emp.joined_date, '%d-%m-%Y') AS joinDate,
        FLOOR((TIMESTAMPDIFF(MONTH, emp.joined_date, NOW())/(12))) as expYears,
        FLOOR((TIMESTAMPDIFF(MONTH, emp.joined_date, NOW()))%12) As expMonths,
        city.city as city, 
        org.name AS orgUnit,
        cmp.name AS sbu,
        subs.name AS subSbu,
        subpr.name AS subPractice,
        mng.employee_number AS rmId,
        eihSbu.changed_from as parentSbu, 
        eihSubSbu.changed_from as parentSubSbu,
        parentmngr.employee_number as parentManagerId,
        CONCAT(parentmngr.first_name,' ',parentmngr.last_name) as parentManagerName,
        concat( mng.first_name," ", mng.last_name ) AS rmName,desg.designation as designation,
        F_Current_EmpLocation(emp.id,CURDATE()) AS workLocation,
        CASE
        WHEN ojf.source_of_hire IN ('d','j') THEN 'Direct'
        WHEN ojf.source_of_hire IN ('r') THEN 'Referral'
        WHEN ojf.source_of_hire IN ('v') THEN 'Vendor'
        END as sourceOfHire,
        CASE
        WHEN dee.submit_status = 2 AND dee.deleted = 'N'  THEN 'Exit Initiated'
        WHEN dee.submit_status > 3 AND dee.submit_status != 4 AND dee.deleted = 'N' AND emp.employment_status NOT IN ('r','b','q','t','o')  THEN 'Under Notice Period'
        WHEN  emp.employment_status IN ('r','b','q','t','o')  THEN 'Resigned'
        ELSE ""
        END AS exitStatus,
        stat.configuration_value AS status,
        bill.configuration_value AS billable,
        DATE_FORMAT(emp.resigned_date, '%d-%m-%Y') AS resigned,
        CASE WHEN emp.released_date <![CDATA[ < ]]> now() THEN DATE_FORMAT(emp.released_date, '%d-%m-%Y') ELSE '' END AS relieved,
        emp.work_email_address as email, band.name as bandName,DATE_FORMAT(FROM_UNIXTIME(info.modified_time), '%d-%m-%y') as transferredDate,
        emp.transferred_country_id AS transferdCountryId,tranCtry.country AS transferedCountry,emp.transferred_city_id AS transfercityId,transCity.city AS transferCity,
        CASE WHEN (emp.mobile_number IS NULL || emp.mobile_number='') THEN '' 
	ELSE emp.mobile_number
	END AS mobile_number,
	CASE WHEN (emp.work_phone_number  IS NULL || emp.work_phone_number='') THEN '' 
	ELSE emp.work_phone_number 
	END AS work_phone_number ,
        CASE emp.gender
        WHEN "m" THEN "Male"
        WHEN "f" THEN "Female"
        END AS gender,
        cs.country AS currentWrkLocation ,
        
        CASE WHEN emp.contract_enddate IS NULL OR emp.contract_enddate ='0000-00-00'
        THEN ''
        ELSE emp.contract_enddate
        END AS contractExpiryDate,
        
        FLOOR(((SUM( pr.exp_month ))+(TIMESTAMPDIFF(MONTH, emp.joined_date, NOW())))%12) AS totalMonthExp,
        CASE
        WHEN 
        ((SUM( pr.exp_month ) )%12)!=0
        THEN 
        FLOOR(SUM( pr.exp_year )+((SUM( pr.exp_month ) )/12)+(TIMESTAMPDIFF(MONTH, emp.joined_date, NOW())/(12)))
        ELSE
        FLOOR(SUM( pr.exp_year)+(TIMESTAMPDIFF(MONTH, emp.joined_date, NOW())/(12)))
        END AS totalYearExp
        FROM employees AS emp
        
        LEFT JOIN company_structures cmp ON (emp.structure_name = cmp.id)
        LEFT JOIN company_structures org ON (cmp.parent_id = org.id)
        LEFT JOIN company_structures subs ON (emp.structure_name_subgroup = subs.id)
        LEFT JOIN company_structures subpr ON (emp.structure_name_subpractice = subpr.id)
        LEFT JOIN company_locations AS loc ON (loc.id = emp.current_location_id)
        LEFT JOIN cities AS city ON (city.id = loc.city_id)
        LEFT JOIN countries as cs on(cs.id=city.country_id)		
        LEFT JOIN employees AS mng ON (mng.id = emp.manager)        
        LEFT JOIN designations desg ON (desg.id = emp.designation_id)
        LEFT JOIN bands band ON (band.id = emp.band_id)
        LEFT JOIN countries tranCtry ON(tranCtry.id=emp.transferred_country_id)
        LEFT JOIN cities transCity ON(transCity.id=emp.transferred_city_id)
        LEFT JOIN employee_info_histories info ON (emp.id = info.employee_id AND info.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employment_status' AND (changed_to = 'e') AND changed_to NOT IN ('r','b','q','t','o')))       
        LEFT JOIN employee_info_histories as eih ON (eih.employee_id = emp.id AND eih.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employee_structure' AND changed_to = '29' AND status = 1))
        LEFT JOIN employees as parentmngr ON (parentmngr.id = eih.prev_manager)
        LEFT JOIN employee_info_histories as eihSbu ON (eihSbu.employee_id = emp.id AND eihSbu.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employee_structure_sbu'))
        LEFT JOIN employee_info_histories as eihSubSbu ON (eihSubSbu.employee_id = emp.id AND eihSubSbu.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employee_structure_sub_sbu'))
        LEFT JOIN configuration_values AS bill ON(bill.configuration_key = emp.billable AND bill.parent_id = 52)
        LEFT JOIN configuration_values AS stat ON(stat.configuration_key = emp.employment_status AND stat.parent_id = 286)
        LEFT JOIN dtl_online_joining_formalities as ojf ON (ojf.employee_id = emp.id)
        LEFT JOIN dtl_exit_employee as dee ON (dee.employee_id = emp.id)
        LEFT JOIN dtl_ojf_pre_employer pr ON (pr.ojf_id=ojf.id)            
        LEFT JOIN dtl_ojf_employees  as doe ON (doe.ojf_id = ojf.id)
        LEFT JOIN id_proofs as idp ON (idp.employee_id=emp.id and idp.proof_type = 'a')
        WHERE 1 = 1-->

        SELECT emp.title AS title, 
        emp.employee_number AS empNumber, 
        CONCAT( emp.first_name," ", emp.last_name ) AS empName,
        emp.pan_number AS panNumber,
        CASE WHEN (idp.proof_number IS NULL || idp.proof_number ="") 
        THEN doe.adhar_number
        ELSE idp.proof_number
        END AS finalAdhar,   
        DATE_FORMAT(emp.birth_date, '%d-%m-%Y') AS birthDate,DATE_FORMAT(emp.joined_date, '%d-%m-%Y') AS joinDate,
        pr.company_year AS expYears,
        pr.company_month AS expMonths,
        city.city AS city, 
        org.name AS orgUnit,
        cmp.name AS sbu,
        subs.name AS subSbu,
        subpr.name AS subPractice,
        mng.employee_number AS rmId,
        CONCAT( mng.first_name," ", mng.last_name ) AS rmName,desg.designation AS designation,
        F_Current_EmpLocation(emp.id,CURDATE()) AS workLocation,
        CASE
        WHEN ojf.source_of_hire IN ('d','j') THEN 'Direct'
        WHEN ojf.source_of_hire IN ('r') THEN 'Referral'
        WHEN ojf.source_of_hire IN ('v') THEN 'Vendor'
        END AS sourceOfHire,
        CASE
        WHEN dee.submit_status = 2 AND dee.deleted = 'N'  THEN 'Exit Initiated'
        WHEN dee.submit_status <![CDATA[ > ]]> 3 AND dee.submit_status != 4 AND dee.deleted = 'N' AND emp.employment_status NOT IN ('r','b','q','t','o')  THEN 'Under Notice Period'
        WHEN  emp.employment_status IN ('r','b','q','t','o')  THEN 'Resigned'
        ELSE "--" 
        END AS exitStatus,
        stat.configuration_value AS STATUS,
        bill.configuration_value AS billable,
        DATE_FORMAT(emp.resigned_date, '%d-%m-%Y') AS resigned,
        CASE WHEN emp.released_date <![CDATA[ < ]]>  NOW() THEN DATE_FORMAT(emp.released_date, '%d-%m-%Y') ELSE '' END AS relieved,
        emp.work_email_address AS email, band.name AS bandName, pr.transfered_date AS transferredDate,
        emp.transferred_country_id AS transferdCountryId,tranCtry.country AS transferedCountry,
        emp.transferred_city_id AS transfercityId,transCity.city AS transferCity,
        CASE WHEN (emp.mobile_number IS NULL || emp.mobile_number='') THEN '--' 
        ELSE emp.mobile_number
        END AS mobile_number,
        CASE WHEN (emp.work_phone_number  IS NULL || emp.work_phone_number='') THEN '--' 
        ELSE emp.work_phone_number 
        END AS work_phone_number ,
        CASE emp.gender
        WHEN "m" THEN "Male"
        WHEN "f" THEN "Female"
        END AS gender,
        cs.country AS currentWrkLocation ,

        CASE WHEN emp.contract_enddate IS NULL OR emp.contract_enddate ='0000-00-00'
        THEN '--'
        ELSE emp.contract_enddate
        END AS contractExpiryDate,

        pr.overall_month AS totalMonthExp,
        pr.overall_year AS totalYearExp,
        cr.course_name AS parentSubSbu,
        
        pr.location_name AS parentManagerId,
        pr.submitted_date AS parentManagerName
        
        FROM employees AS emp

        LEFT JOIN company_structures cmp ON (emp.structure_name = cmp.id)
        LEFT JOIN company_structures org ON (cmp.parent_id = org.id)
        LEFT JOIN company_structures subs ON (emp.structure_name_subgroup = subs.id)
        LEFT JOIN company_structures subpr ON (emp.structure_name_subpractice = subpr.id)
        LEFT JOIN company_locations AS loc ON (loc.id = emp.current_location_id)
        LEFT JOIN cities AS city ON (city.id = loc.city_id)
        LEFT JOIN countries AS cs ON(cs.id=city.country_id)		
        LEFT JOIN employees AS mng ON (mng.id = emp.manager)        
        LEFT JOIN designations desg ON (desg.id = emp.designation_id)
        LEFT JOIN bands band ON (band.id = emp.band_id)
        LEFT JOIN countries tranCtry ON(tranCtry.id=emp.transferred_country_id)
        LEFT JOIN cities transCity ON(transCity.id=emp.transferred_city_id)
        LEFT JOIN configuration_values AS bill ON(bill.configuration_key = emp.billable AND bill.parent_id = 52)
        LEFT JOIN configuration_values AS stat ON(stat.configuration_key = emp.employment_status AND stat.parent_id = 286)
        LEFT JOIN dtl_online_joining_formalities AS ojf ON (ojf.employee_id = emp.id)
        LEFT JOIN dtl_exit_employee AS dee ON (dee.employee_id = emp.id)
        LEFT JOIN employee_workexperience AS pr ON (emp.id=pr.employee_id)  
        LEFT JOIN dtl_employee_education AS ded ON(emp.id = ded.employee_id AND ded.year_of_passing = pr.year_of_passing AND ded.deleted = 0)
        LEFT JOIN courses AS cr ON(ded.course = cr.id)          
        LEFT JOIN dtl_ojf_employees  AS doe ON (doe.ojf_id = ojf.id)
        LEFT JOIN id_proofs AS idp ON (idp.employee_id=emp.id AND idp.proof_type = 'a')
        WHERE 1 = 1
        <dynamic prepend="AND">
            <isNotEqual property="sbu" compareValue="All">
                cmp.id = #sbu#
            </isNotEqual>
        </dynamic>
        <dynamic prepend="AND">
            <isNotEmpty property="subSbu">
            <isNotEqual property="subSbu" compareValue="All">
                subs.id = #subSbu#
            </isNotEqual>
            </isNotEmpty>
        </dynamic>
        <dynamic prepend="AND">
                emp.employment_status in ($status$)
             </dynamic>
        <dynamic prepend="AND">
            <isNotEmpty property="joinedStartDate">
                emp.joined_date between #joinedStartDate# AND #joinedEndDate#
            </isNotEmpty>
        </dynamic>
        <dynamic prepend="AND">            
            <isNotEmpty property="activeEmpDate">
                (emp.released_date <![CDATA[ > ]]> #activeEmpDate# <![CDATA[ || ]]> emp.released_date IS NULL)               
            </isNotEmpty>
        </dynamic>
        group by emp.id order by emp.employee_number
        <dynamic>
            <isNotEqual property="end_page" compareValue="0">
                LIMIT #start_page#,#end_page#;
            </isNotEqual>
        </dynamic>
    </select>
    <select id="getSubSbu" parameterClass="String" resultClass="com.defiance.ideal.reports.dto.AssociateFilterDTO">
        SELECT id as id,name AS name FROM company_structures c WHERE parent_id IN ($parentId$);
    </select>
    
    <select id="getSbu" parameterClass="String" resultClass="com.defiance.ideal.reports.dto.AssociateFilterDTO">
        SELECT id as id,name AS name FROM company_structures c WHERE parent_id IN (SELECT id FROM company_structures WHERE parent_id =0);
    </select>
    
    <select id="getParent_id" parameterClass="String" resultClass="String">
        SELECT GROUP_CONCAT(id) AS id FROM company_structures c WHERE parent_id IN (SELECT id FROM company_structures WHERE parent_id =0)
    </select>
    
    <select id="fetchAssociateListCount" parameterClass="com.defiance.ideal.reports.dto.AssociateDataDTO" resultClass="java.lang.Integer">
        select count(*) as recordCount from (SELECT  count(*) FROM employees AS emp
<!--        LEFT JOIN company_structures cmp ON (emp.structure_name = cmp.id)
        LEFT JOIN company_structures subs ON (emp.structure_name_subgroup = subs.id)
        LEFT JOIN company_locations AS loc ON (loc.id = emp.current_location_id)
        LEFT JOIN cities AS city ON (city.id = loc.city_id)
        LEFT JOIN employees AS mng ON (mng.id = emp.manager)
        LEFT JOIN employee_skills skills ON (skills.id = emp.id)
        LEFT JOIN designations desg ON (desg.id = emp.designation_id)
        LEFT JOIN bands band ON (band.id = emp.band_id)
        LEFT JOIN countries tranCtry ON(tranCtry.id=emp.transferred_country_id)
        LEFT JOIN cities transCity ON(transCity.id=emp.transferred_city_id)
        LEFT JOIN employee_info_histories info ON (emp.id = info.employee_id AND info.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employment_status' AND (changed_from = 'e' || changed_to = 'e') AND changed_to NOT IN ('r','b','q','t','o')))
        LEFT JOIN dtl_employee_skills dempSkl ON(dempSkl.employee_id=emp.id)
        LEFT JOIN dtl_skills skl ON(skl.skill_id=dempSkl.skill_id)
        LEFT JOIN dtl_streams str ON(str.id=skl.stream_id)
        LEFT JOIN employee_info_histories as eih ON (eih.employee_id = emp.id AND eih.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employee_structure' AND changed_to = '29' AND status = 1))
        LEFT JOIN employees as parentmngr ON (parentmngr.id = eih.prev_manager)
        LEFT JOIN company_structures as parentSUBSBU ON (parentSUBSBU.id = eih.changed_from)
        LEFT JOIN company_structures as parentSBU ON (parentSBU.id = parentSUBSBU.parent_id)
        LEFT JOIN dtl_exit_employee as dee ON (dee.employee_id = emp.id)-->
        LEFT JOIN company_structures cmp ON (emp.structure_name = cmp.id)
        LEFT JOIN company_structures subs ON (emp.structure_name_subgroup = subs.id)
        LEFT JOIN company_locations AS loc ON (loc.id = emp.current_location_id)
        LEFT JOIN cities AS city ON (city.id = loc.city_id)
        LEFT JOIN countries as cs on(cs.id=city.country_id)		
        LEFT JOIN employees AS mng ON (mng.id = emp.manager)        
        LEFT JOIN designations desg ON (desg.id = emp.designation_id)
        LEFT JOIN bands band ON (band.id = emp.band_id)
        LEFT JOIN countries tranCtry ON(tranCtry.id=emp.transferred_country_id)
        LEFT JOIN cities transCity ON(transCity.id=emp.transferred_city_id)
        LEFT JOIN employee_info_histories info ON (emp.id = info.employee_id AND info.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employment_status' AND (changed_from = 'e' || changed_to = 'e') AND changed_to NOT IN ('r','b','q','t')))       
        LEFT JOIN employee_info_histories as eih ON (eih.employee_id = emp.id AND eih.id = (select MAX(id) from employee_info_histories where employee_id = emp.id AND field_changed = 'employee_structure' AND changed_to = '29' AND status = 1))
        LEFT JOIN employees as parentmngr ON (parentmngr.id = eih.prev_manager)
        LEFT JOIN company_structures as parentSUBSBU ON (parentSUBSBU.id = eih.changed_from)
        LEFT JOIN company_structures as parentSBU ON (parentSBU.id = parentSUBSBU.parent_id)
        LEFT JOIN dtl_online_joining_formalities as ojf ON (ojf.employee_id = emp.id)
        LEFT JOIN dtl_exit_employee as dee ON (dee.employee_id = emp.id)
        LEFT JOIN dtl_ojf_pre_employer pr ON (pr.ojf_id=ojf.id)
        LEFT JOIN project_team_allocations AS pta ON(pta.employee_id=emp.id AND CURDATE() BETWEEN pta.start_date AND pta.end_date AND pta.deleted=0 AND pta.status='a') 
        LEFT JOIN projects AS prj ON(prj.id= pta.project_id)
        WHERE 1=1
        <dynamic prepend="AND">
            <isNotEqual property="sbu" compareValue="All">
                cmp.id = #sbu#
            </isNotEqual>
        </dynamic>
        <dynamic prepend="AND">
            <isNotEmpty property="subSbu">
            <isNotEqual property="subSbu" compareValue="All">
                subs.id = #subSbu#
            </isNotEqual>
            </isNotEmpty>
        </dynamic>
         <dynamic prepend="AND">
                emp.employment_status in ($status$)
             </dynamic>
        <dynamic prepend="AND">
            <isNotEmpty property="joinedStartDate">
                emp.joined_date between #joinedStartDate# AND #joinedEndDate#
            </isNotEmpty>
        </dynamic>
       <dynamic prepend="AND">
            <isNotEmpty property="activeEmpDate">
                (emp.released_date <![CDATA[ > ]]> #activeEmpDate# <![CDATA[ || ]]> emp.released_date IS NULL)               
            </isNotEmpty>
        </dynamic>
        group by emp.id order by emp.employee_number) AS temp
         
    </select>


    <select id="getEmpStatus"  resultClass="com.defiance.ideal.reports.dto.AssociateFilterDTO">
        SELECT a.configuration_key as id, a.configuration_value as name
        FROM configuration_values AS a
        INNER JOIN configuration_values AS b ON ( a.parent_id = b.id
        AND b.configuration_key = "employment_status_others")
    </select>
    
    <select id="updateExperienceDetails" parameterClass="String" resultClass="String">
        CALL PR_EMPLOYEE_MONTHLY_WORK_EXPERIENCE(NULL);
    </select>

</sqlMap>